from aiogram import Bot
from aiogram import Dispatcher
from aiogram import executor
from aiogram import types
from time import sleep
from aiogram.dispatcher.filters import CommandStart
import datetime
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.filters import BoundFilter
from aiogram.dispatcher import FSMContext
import random
import sqlite3
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import IsReplyFilter
from aiogram.dispatcher.filters.state import StatesGroup, State


# –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º
API_TOKEN = 'TOKEN'
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è/—Å–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
bd = sqlite3.connect('datasciense.db')
cur = bd.cursor()

bd.commit()
# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É(–µ—Å–ª–∏ –µ—ë –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤–µ—Ç) –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∏–∫–∞. –°—Ç–æ–ª–±—Ü—ã: id, –∏–º—è –≤ —á–∞—Ç–µ, –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, –≥–æ—Ä–æ–¥, —Ä–µ–ø—É—Ç–∞—Ü–∏—è, –±–∏–±–ª–∏–æ—Ç–µ–∫–∞-—Ä–æ–ª—å, –æ —Å–µ–±–µ, –ø–æ—á–µ–º—É –î–°)
bd.execute('CREATE TABLE IF NOT EXISTS Users (id int NOT NULL, chat_name NULL, sex NULL, age int NULL, city NULL, rep int, libstate NULL, aself NULL, whyds NULL, PRIMARY KEY(id))')
# –ù–ï –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –ó–ê–î–ê–ß–ê –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö –±–ª–∏—Ü–∞, –æ—Ç–≤–µ—Ç—ã –±—É–¥–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏:
bd.execute(
    'CREATE TABLE IF NOT EXISTS Blic ('
    'id int NOT NULL,'
    'cat_dog NULL, '
    'pizza_suchi NULL, '
    'sea_mount NULL, '
    'flat_house NULL, '
    'train_plain NULL, '
    'tea_coffe NULL, '
    'tv_tube NULL, '
    'andr_ios NULL,  '
    'tatoo NULL, '
    'drive NULL, '
    'parent_kid NULL, '
    'films NULL, '
    'melody NULL, '
    'knigas NULL, '
    'PRIMARY KEY(id))')
bd.execute('CREATE TABLE IF NOT EXISTS Base (id NOT NULL, name NULL, desc NULL, fullv NULL, args NULL, example NULL, dopinfo NULL, erors NULL, meth_args NULL, cat1 NULL, cat2 NULL, cat3 NULL, file NULL, PRIMARY KEY(id))')
# –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
bd.commit()

# –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å—Ç–∞—Ä—Ç
button1 = InlineKeyboardButton(text='–ü–†–û–§–ò–õ–¨üßê', callback_data='profile')
button2 = InlineKeyboardButton(text='–ë–õ–ò–¶üßæ', callback_data='blic')
button3 = InlineKeyboardButton(text='–°–ö–õ–ê–î –î–°üíå', callback_data='base')
button4 = InlineKeyboardButton(text='–û–°–ù–û–í–ù–û–ï –ú–ï–ù–Æ', callback_data='menu')


class Profile(StatesGroup):
    ProfileSex = State()
    ProfileAge = State()
    ProfileCity = State()
    ProfileAself = State()
    ProfileWhyDs = State()
class Blic(StatesGroup):
    cat_dog = State()
    pizza_suchi = State()
    sea_mount = State()
    flat_house = State()
    train_plain = State()
    tea_coffe = State()
    tv_tube = State()
    andr_ios = State()
    tatoo = State()
    drive = State()
    parent_kid = State()
    music = State()
    films = State()
    books = State()
@dp.message_handler(CommandStart())
async def first_step(message: types.Message):
    user_id = message.from_user.id
    fellows = cur.execute('SELECT id FROM Users').fetchall()
    fellows_list = [x[0] for x in fellows]
    main_menu = InlineKeyboardMarkup(row_width=2)
    main_menu.insert(button1)
    main_menu.insert(button2)
    # MainMenu.insert(button3)
    await bot.send_sticker(
        chat_id=message.chat.id,
        sticker="CAACAgIAAxkBAAEGt_ZjkD9sRrXH8R2XpQsYpRyafOfHJAACphgAAhRjYUrTgchlOAQs7ysE"
    )
    if user_id in fellows_list:
        # –ø–æ–ª—É—á–∏–º –Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω —É–∫–∞–∑–∞–ª –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
        # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
        fellow_message = f'–†–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å, {message.from_user.first_name}. –ù–∞—Å —É–∂–µ {len(fellows_list)}'
        # —Å–∞–º–∞ —Ä–µ–∞–∫—Ü–∏—è, –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        # –û–±—ä–µ–∫—Ç message –∏–º–µ–µ—Ç –º–Ω–æ–≥–æ –º–µ—Ç–æ–¥–æ–≤. –ü—Ä–æ—â–µ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å. –ü–æ–∫–∞ –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª—é
        await message.answer(text=fellow_message, parse_mode="MarkDown", reply_markup=main_menu)
        # –ø–æ–ª—É—á–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –ª–∏ —ç—Ç–æ—Ç —é–∑–µ—Ä –≤ –±–ª–∏—Ü–µ
        victory_id = cur.execute('SELECT id FROM Blic').fetchall()
        victory_id_list = [x[0] for x in victory_id]
        # —Å—Ü–µ–Ω–∞—Ä–∏–π –µ—Å–ª–∏ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª
        if user_id in victory_id_list:
            good_person = f'–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω –∏ —Ç—ã –ø—Ä–æ—à—ë–ª –±–ª–∏—Ü. –î–∞–≤–∞–π –æ–±–Ω–∏–º–∏—Å—è, —á—Ç–æ –ª–∏? –ó–æ–ª–æ—Ç—ã–π —Ç—ã —á–µ–ª–æ–≤–µ—á–µ–∫'
            await bot.send_message(chat_id=good_person, text=welcome, parse_mode="MarkDown")
        # —Å—Ü–µ–Ω–∞—Ä–∏–π –µ—Å–ª–∏ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª
        elif user_id not in victory_id_list:
            vitctorina_user = f'–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω, –Ω–æ —Ç—ã –Ω–µ –ø—Ä–æ—à—ë–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É. ' \
                              f'–ü—Ä–æ–π–¥–∏, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≤—Ä–µ–º—è. –ú–Ω–µ –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ *Data Science*'
            await bot.send_message(chat_id=user_id, text=vitctorina_user, parse_mode="MarkDown", reply_markup=main_menu)
        # –ª–æ–≤–∏–º –æ—à–∏–±–∫—É
        else:
            await message.answer(text='–û—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –º–æ–∏–º –∞–≤—Ç–æ—Ä–∞–º')
    # –Ω–∞–ø–∏—à–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è —Å–ª—É—á–∞–µ–≤, –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–µ –≤ –±–∞–∑–µ
    elif user_id not in fellows_list:
        welcome = (f'–ü—Ä–∏–≤—è—É, —è –°—Ç–∞—Ä–æ—Å—Ç–∞.\n'
                   f'–Ø –º–Ω–æ–≥–æ —É—á–∏–ª—Å—è —Ä–∞–Ω—å—à–µ, –∞ —Å–µ–π—á–∞—Å –ø–æ–º–æ–≥–∞—é —Ç–µ–º, –∫—Ç–æ —É—á–∏—Ç—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. –ö—Å—Ç–∞—Ç–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è –∫—É—Ä—Å—É —è –Ω–∞—à—ë–ª {len(fellows_list)} –¥—Ä—É–∑–µ–π.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ü–†–û–§–ò–õ–¨" —á—Ç–æ–±—ã —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —á—É—Ç—å –±–æ–ª—å—à–µ –æ —Å–µ–±–µ\n'
                   f'–ï—â–µ —è –ø—Ä–æ–≤–æ–∂—É –º–∏–Ω–∏-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ë–õ–ò–¶", —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–±–æ–ª—å—à–æ–π –±–ª–∏—Ü –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ —Ñ–∏–ª—å–º–∞–º, –∫–Ω–∏–≥–∞–º, –º—É–∑—ã–∫–µ\n')
        cur.execute('INSERT INTO Users(id, rep) VALUES(?, ?)', (user_id, 0))
        bd.commit()
        await bot.send_message(chat_id=user_id, text=welcome, parse_mode="MarkDown", reply_markup=main_menu)

# –ó–∞–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π. –ù–µ–¥–æ—Ä–∞–±–æ—Ç–∞–Ω–∞
@dp.callback_query_handler(text='base')
async def myfunc(call):
    funcs = cur.execute('SELECT func FROM Base WHERE func NOT NULL').fetchall()
    funcs_list = [x[0] for x in funcs]
    buttonb1 = InlineKeyboardButton(text='–°–ü–ò–°–û–ö', callback_data='funlis')
    buttonb2 = InlineKeyboardButton(text='–î–û–ë–ê–í–ò–¢–¨', callback_data='addfun')
    base_menu = InlineKeyboardMarkup(row_width=2)
    base_menu.insert(buttonb1)
    base_menu.insert(buttonb2)
    base_mes = f'–≠—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø–æ–ª–µ–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π. –°–µ–π—á–∞—Å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ {len(funcs_list)} —Ñ—É–Ω–∫—Ü–∏–π. ' \
               f'–ù–∞–∂–º–∏ "–°–ü–ò–°–û–ö" —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É. ' \
               f'–ù–∞–∂–º–∏ "–î–û–ë–ê–í–ò–¢–¨" —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏'
    await bot.send_message(chat_id=call.from_user.id, text=base_mes, parse_mode="MarkDown")

# –ó–∞–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –°–ü–ò–°–û–ö
# –ü—É—Å—Ç—å –ø–æ–∫–∞ –∑–∞–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã –±—É–¥—É—Ç, —á—Ç–æ–±—ã –ª–∏—à–Ω–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –±—ã–ª–æ
# @dp.callback_query_handler(text='funlis')
# async def funlist(call):
#     funcs = cur.execute('SELECT func FROM Base WHERE func NOT NULL').fetchall()
#     funcs_list = [x[0] for x in funcs]
#     await bot.send_message(chat_id=call.from_user.id, text=funcs_list, parse_mode="MarkDown", reply_markup=BaseMenu)

# –ó–∞–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –î–û–ë–ê–í–ò–¢–¨
# @dp.callback_query_handler(text='addfun')
# async def addfun(call):
#     funcs = cur.execute('SELECT func FROM Base WHERE func NOT NULL').fetchall()
#     funcs_list = [x[0] for x in funcs]
#     await bot.send_message(chat_id=call.from_user.id, text=funcs_list, parse_mode="MarkDown", reply_markup=BaseMenu)


@dp.callback_query_handler(text='profile')
async def pro_file(call):
    user_id = call.from_user.id
    myprofile = cur.execute('SELECT sex FROM Users WHERE id=' + str(user_id)).fetchone()
    mycheck = cur.execute('SELECT * FROM Users WHERE id=' + str(user_id)).fetchone()
    button11 = InlineKeyboardButton(text='–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data='addprofile')
    if myprofile is not None:
        myinfo = (
            f'*–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ –î–°–µ—Ä–∞*\n'
            f'*–ü–æ–∑—ã–≤–Ω–æ–π*: {mycheck[1]}\n'
            f'*–ü–æ–ª*: {mycheck[2]}\n'
            f'*–í–æ–∑—Ä–∞—Å—Ç*: {mycheck[3]}\n'
            f'*–ì–æ—Ä–æ–¥*: {mycheck[4]}\n'
            f'*–†–µ–ø—É—Ç–∞—Ü–∏—è*: {mycheck[5]}\n'
            f'*–û —Å–µ–±–µ*:{mycheck[7]}\n'
            f'*–ü–æ—á–µ–º—É DS*: {mycheck[8]}\n'
        )
        profile_menu = InlineKeyboardMarkup(row_width=2)
        profile_menu.insert(button11)
        profile_menu.insert(button4)
        await bot.send_message(chat_id=user_id, text=myinfo, parse_mode="MarkDown", reply_markup=profile_menu)
    elif myprofile is None:
        profile_menu1 = InlineKeyboardMarkup(row_width=2)
        profile_menu1.insert(button11)
        profile_menu1.insert(button4)
        await bot.send_message(
            chat_id=call.from_user.id, 
            text='–°–¥–µ–ª–∞–π –¥–æ–±—Ä–æ–µ DS-–¥–µ–ª–æ, —Ö–æ—Ä–æ—à–∏–π —á–µ–ª–æ–≤–µ–∫, –∑–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å!', 
            parse_mode="MarkDown", reply_markup=profile_menu1
        )
    await bot.send_message(chat_id=user_id, text="–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —é–∑–µ—Ä–∞, –Ω–∞–ø–∏—à–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '–ø—Ä–æ—Ñ–∏–ª—å'", parse_mode="MarkDown")

@dp.callback_query_handler(text='addprofile')
async def addprofile_new(call):
    user_id = call.from_user.id
    user_name = call.from_user.first_name
    profile_sex = InlineKeyboardMarkup(row_width=2)
    button1 = InlineKeyboardButton(text='–ú—É–∂—Å–∫–æ–πüßîüèª‚Äç‚ôÇÔ∏è', callback_data='iman')
    button2 = InlineKeyboardButton(text='–ñ–µ–Ω—Å–∫–∏–πüë©üèª‚Äçü¶∞', callback_data='iwomen')
    button3 = InlineKeyboardButton(text='–î—Ä—É–≥–æ–πüßå', callback_data='inone')
    profile_sex.insert(button1)
    profile_sex.insert(button2)
    profile_sex.insert(button3)
    await bot.send_message(
        chat_id=user_id, 
        text='–ß—É–¥–µ—Å–Ω–æ, –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –∫–ª–∞–¥ –¥–ª—è –º–æ–ª–æ–¥–æ–≥–æ DS-–µ—Ä–∞. '
             '–°–µ–π—á–∞—Å —è –∑–∞–¥–∞–º —Ç–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤. –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª', 
        parse_mode="MarkDown",  reply_markup=profile_sex
    )
    await Profile.ProfileSex.set()
    cur.execute('UPDATE Users SET chat_name == ? WHERE id == ?', (user_name, user_id))
    bd.commit()


@dp.callback_query_handler(text=['iman', 'iwomen', 'inone'], state=Profile.ProfileSex)
async def sex_age(call, state: FSMContext):
    user_id = call.from_user.id
    age_quest = f'–° —ç—Ç–∏–º –≤—Å–µ —è—Å–Ω–æ. –¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–µ–Ω —Ç–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç. –ù–∞–ø–∏—à–∏ –µ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏'
    if call.data == 'iman':
        cur.execute('UPDATE Users SET sex == ? WHERE id == ?', ('man', user_id))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text=age_quest)
        await Profile.ProfileAge.set()
    elif call.data == 'iwomen':
        cur.execute('UPDATE Users SET sex == ? WHERE id == ?', ('woman', user_id))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text=age_quest)
        await Profile.ProfileAge.set()
    elif call.data == 'inone':
        cur.execute('UPDATE Users SET sex == ? WHERE id == ?', ('noone', user_id))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text=age_quest)
        await Profile.ProfileAge.set()


@dp.message_handler(state=Profile.ProfileAge)
async def age_city(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    mes = message.text
    if mes.isdigit():
        if 18 < int(mes) < 88:
            cur.execute('UPDATE Users SET age == ? WHERE id == ?', (mes, user_id))
            bd.commit()
            await bot.send_message(
                chat_id=user_id,
                text='–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –∏–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞'
            )
            await Profile.ProfileCity.set()
        else:
            await bot.send_message(chat_id=user_id,
                                   text='–°–æ–º–Ω–µ–≤–∞—é—Å—å, —á—Ç–æ —Ç–µ–±–µ –º–µ–Ω—å—à–µ 19 –∏ –±–æ–ª—å—à–µ 88. –ú–æ–∂–µ—Ç —Ç—ã –æ–ø–µ—á–∞—Ç–∞–ª—Å—è?')
    else:
        await bot.send_message(chat_id=user_id,
                               text='–ü—Ä–∏—à–ª–∏ —Å–≤–æ—é –Ω–∞—Å—Ç–æ—è—â—É—é —Ü–∏—Ñ—Ä—É')

@dp.message_handler(state=Profile.ProfileCity)
async def city_aself(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    mes = message.text
    if 3 < len(mes) < 35:
        cur.execute('UPDATE Users SET city == ? WHERE id == ?', (mes, user_id))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text='–ü–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ')
        await Profile.ProfileAself.set()
    else:
        await bot.send_message(chat_id=user_id,
                               text='–ß—Ç–æ –∑–∞ –≥–æ—Ä–æ–¥ —Ç–∞–∫–æ–π? –í—ã–¥—É–º–∞–Ω–Ω—ã–π —á—Ç–æ–ª–∏?')

@dp.message_handler(state=Profile.ProfileAself)
async def aself_ds(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    mes = message.text
    if 5 < len(mes) < 228:
        cur.execute('UPDATE Users SET aself == ? WHERE id == ?', (mes, user_id))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text='–ù—É –∏ —Ñ–∏–Ω–∞–ª–æ—á–∫–∞. –ü–æ—á–µ–º—É –≤—ã–±—Ä–∞–ª/–≤—ã–±—Ä–∞–ª–∞ DS?')
        await Profile.ProfileWhyDs.set()
    else:
        await bot.send_message(chat_id=user_id,
                               text='–ù–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ö–æ—Ç—å —Ç–æ-—Ç–æ –¥–µ–ª—å–Ω–æ–µ')

@dp.message_handler(state=Profile.ProfileWhyDs)
async def my_ds(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    mes = message.text
    if 5 < len(mes) < 228:
        cur.execute('UPDATE Users SET whyds == ? WHERE id == ?', (mes, user_id))
        bd.commit()
        await state.reset_state()
        mycheck = cur.execute('SELECT * FROM Users WHERE id=' + str(user_id)).fetchone()
        myinfo = (
            f'*–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ –î–°–µ—Ä–∞*\n'
            f'*–ü–æ–∑—ã–≤–Ω–æ–π*: {mycheck[1]}\n'
            f'*–ü–æ–ª*: {mycheck[2]}\n'
            f'*–í–æ–∑—Ä–∞—Å—Ç*: {mycheck[3]}\n'
            f'*–ì–æ—Ä–æ–¥*: {mycheck[4]}\n'
            f'*–†–µ–ø—É—Ç–∞—Ü–∏—è*: {mycheck[5]}\n'
            f'*–û —Å–µ–±–µ*:{mycheck[7]}\n'
            f'*–ü–æ—á–µ–º—É DS*: {mycheck[8]}\n'
        )
        await bot.send_message(chat_id=user_id, text=myinfo, parse_mode="MarkDown")
    else:
        await bot.send_message(chat_id=user_id,
                               text='–ù–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ö–æ—Ç—å —Ç–æ-—Ç–æ –¥–µ–ª—å–Ω–æ–µ')

@dp.message_handler(IsReplyFilter(is_reply=True))
async def print_func(message: types.Message):
    message_lower = message.text.lower()
    rep_id = message.reply_to_message.from_user.id
    rep_name = message.reply_to_message.from_user.first_name
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    mention_rep = "[" + rep_name + "](tg://user?id=" + str(rep_id) + ")"
    if message.from_user.id == 840994663:
        sleep(3)
        maga_phrase = ['–ù—É —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å, –Ω—É —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å, —á–µ–ª–æ–≤–µ–∫ –º–æ–π –¥–æ—Ä–æ–≥–æ–π?',
                       '–ö–í–ù –∑–∞–∫–∞–∑—ã–≤–∞–ª–∏?',
                       '–î–∞ —Ç—ã –º–Ω–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π, —Ç—ã –∏–º —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π',
                       'C–º–µ–∫–∞–µ—à—å?',
                       '–¢—ã —Ç—É—Ç —Å–∞–º—ã–π –∫—Ä—É—Ç–æ–π',
                       '–ú–æ–∂–µ—Ç –ø–æ—Å–ø–ª–µ—Ç–Ω–∏—á–∞–µ–º?',
                       '–õ—é–±–∏—à—å –∫–∞—Ç–∞—Ç—å—Å—è - –ª—é–±–∏ –∏ –∫–∞—Ç–∞–π—Å—è',
                       '–í–æ–æ–±—â–µ-—Ç–æ –¥–∞',
                       '–ï—â–µ —á–µ–≥–æ, –∫–∞–∫–∏–µ –≥–ª—É–ø–æ—Å—Ç–∏',
                       '–ü–æ—Å–≤–µ—Ç—É–π —Ñ–∏–ª—å–º–µ—Ü –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å'
                       '–ì–¥–µ —Å–µ–π—á–∞—Å –º–æ–∂–Ω–æ –Ω–µ–¥–æ—Ä–æ–≥–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å?',
                       '–ö–∞–∫ —è —Ç–µ–±—è –ø–æ–Ω–∏–º–∞—é'
                       '–ù—É –≤–æ—Ç –∏ —è –æ —Ç–æ–º –∂–µ',
                       '–ê –º–æ–∂–Ω–æ —Ç–æ—Å—Ç?']
        forfun = random.choice(maga_phrase)
        await message.answer(
            text=forfun, parse_mode="MarkDown")
    elif message_lower.find('–ø–∞—Å–∏–±') > -1 or message_lower.find('–ª–∞–≥–æ–¥–∞—Ä') > -1:
        if user_id == rep_id:
            await message.answer(
                text=f'{mention_rep} —Ç—ã —Ç–∞–∫-—Ç–æ —á–µ–ª–æ–≤–µ—á–µ–∫ —Ö–æ—Ä–æ—à–∏–π. –í—Å–µ —ç—Ç–æ —É–∂–µ –ø–æ–Ω—è–ª–∏. –ú–æ–∂–µ—Ç –ø—Ä–æ DS —á—Ç–æ –Ω–∏—Ç—å –Ω–∞–∫–∏–¥–∞–µ—à—å?',
                parse_mode="MarkDown")
        elif user_id != rep_id:
            user_rate_cur = cur.execute('SELECT rep FROM Users WHERE id=' + str(rep_id)).fetchone()
            if not user_rate_cur:
                await message.answer(
                    text=f'{rep_name}, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è —Ç–µ–±—è –∑–Ω–∞—é –∏ –Ω–µ –º–æ–≥—É –ø–æ–≤—ã—Å–∏—Ç—å —Ç–≤–æ—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é. '
                         f'–ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å',
                    parse_mode="MarkDown"
                )
            elif user_rate_cur[0] >= 0:
                user_rate_fin = user_rate_cur[0] + 1
                funfact = ['–ø—Ä–∏—è—Ç–Ω—ã–π —á–µ–ª–æ–≤–µ–∫.',
                           '–º—É–¥—Ä—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫.'
                           '–≤—Å–µ–≥–¥–∞ —É–º–µ–µ—Ç –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞.',
                           '—á–µ–ª–æ–≤–µ–∫ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤–´.',
                           '–Ω–∞–∏–ø—Ä–∏—è—Ç–Ω–µ–π—à–∞—è –ª–∏—á–Ω–æ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ DS',
                           '—Ü–≤–µ—Ç–æ–∫ –¥–æ–±—Ä–∞',
                           '—Ä–∞—Å—à–∞—Ä–∏–ª(–∞) –º—É–¥—Ä–æ—Å—Ç—å',
                           '–∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–µ–Ω –∏ –¢–û–ß–ö–ê',
                           '–∑–∞–¥–∞—ë—Ç —Ö–æ—Ä–æ—à–∏–π —Ç–æ–Ω',
                           '—É–º–µ–µ—Ç –¥–µ–ª–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ',
                           '–≤—ã—Ä—É—á–∏–ª –Ω–∞ –ø—è—Ç–µ—Ä–æ—á–∫—É. –ê–π –º–æ–ª–æ–¥—Ü–∞!',
                           '–ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ö–æ—Ä–æ—à—É—é —Ç—Ä–∞–¥–∏—Ü–∏—é',
                           '–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ–±—â–∏–π —Ñ–æ–Ω.',
                           '—Ö–æ—Ä–æ—à–æ —É–º–µ–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–æ–Ω–æ—Å—Ç—å.',
                           '–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –ª–∏—á–Ω–æ—Å—Ç—å —á–∞—Å–∞.']
                forfun = random.choice(funfact)
                await message.answer(
                    text=f' {mention_rep} {forfun}.\n+1 –≤ —Ç–≤–æ—é –ª–∏—á–Ω—É—é *–∫–æ–ª–ª–µ–∫—Ü–∏—é –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π*.'
                         f'\n*–£—Ä–æ–≤–µ–Ω—å* –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏: {user_rate_fin} ‚≠êÔ∏è',
                    parse_mode="MarkDown"
                )
                cur.execute('UPDATE Users SET rep == ? WHERE id == ?', (user_rate_fin, rep_id))
                bd.commit()
    elif message_lower.find('–ø—Ä–æ—Ñ–∏–ª') > -1:
        mycheck = cur.execute('SELECT * FROM Users WHERE id=' + str(rep_id)).fetchone()
        if not mycheck[4]:
            await bot.send_message(
                chat_id=message.chat.id,
                text=f'{rep_name} –ø–æ–∫–∞ –µ—â–µ –Ω–µ —á—É–≤—Å—Ç–≤—É–µ—Ç —Å–µ–±—è –î–°–µ—Ä–æ–º, '
                     f'—É –Ω–µ–≥–æ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è –∏ –µ–º—É –Ω–µ—á–µ–≥–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ —Å–µ–±–µ',
                parse_mode="MarkDown")

        elif len(mycheck[7]) >= 3:
            myinfo = (
                f'*–ü—Ä–æ—Ñ–∏–ª—å {rep_name}*\n'
                f'*–ü–æ–∑—ã–≤–Ω–æ–π*: {mycheck[1]}\n'
                f'*–ü–æ–ª*: {mycheck[2]}\n'
                f'*–í–æ–∑—Ä–∞—Å—Ç*: {mycheck[3]}\n'
                f'*–ì–æ—Ä–æ–¥*: {mycheck[4]}\n'
                f'*–†–µ–ø—É—Ç–∞—Ü–∏—è*: {mycheck[5]}\n'
                f'*–û —Å–µ–±–µ*:{mycheck[7]}\n'
                f'*–ü–æ—á–µ–º—É DS*: {mycheck[8]}\n'
            )
            await bot.send_message(chat_id=message.from_user.id, text=myinfo, parse_mode="MarkDown")
    elif message.reply_to_message.from_user.is_bot:
        sleep(2)
        all_phrases = ['–ù—É —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å, –Ω—É —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å, —á–µ–ª–æ–≤–µ–∫ –º–æ–π –¥–æ—Ä–æ–≥–æ–π?',
                       '–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è 4 —á–∞—Å–∞ 20 –º–∏–Ω—É—Ç',
                       '–î–∞ —Ç—ã –º–Ω–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π, —Ç—ã –∏–º —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π',
                       '–ê –≤–æ—Ç —ç—Ç—É –º—É–¥—Ä–æ—Å—Ç—å –º—ã –ø–æ—Å—Ç–∞–≤–∏–º –ø–æ–¥ —Å–æ–º–Ω–µ–Ω–∏–µ',
                       '–ê —á—Ç–æ –µ—Å–ª–∏ —è –†–æ–±–æ–∫–æ—Ç –∏–ª–∏ –†–æ–±–æ–∫–æ–ø?',
                       '–£–≤–∞–∂—å—Ç–µ –º–µ–Ω—è –∫—Ç–æ-–Ω–∏–±—É–¥—å',
                       '–ö–∞–∫–æ–≤–∞ —Ç–≤–æ—è –Ω—É–ª–µ–≤–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞?',
                       '–ü–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∫–∞–∂–¥—ã–π –î–°–µ—Ä –µ—â–µ —Ç–æ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫',
                       '–ö–∞–∫-—Ç–æ —Ä–∞–∑ –∑–∞—Å–Ω—É–ª –∏ —Å–Ω–∏—Ç—å—Å—è –º–Ω–µ p-value',
                       '–ù—É –≤–æ—Ç —Å–∫–∞–∂–∏, –º–Ω–µ —Å—Ç—É–¥–µ–Ω—Ç, –≤ —á–µ–º —Å–∏–ª–∞?',
                       '–£–ª—ã–±–∞–π—Ç–µ—Å—å ‚Äî —ç—Ç–æ –≤—Å–µ—Ö —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç!',
                       '–¢—ã —Ç—É—Ç –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –∑–Ω–∞–µ—à—å? –ò–º –º–æ–∂–Ω–æ –¥–æ–≤–µ—Ä—è—Ç—å?',
                       '–Ø –∏–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω—ã–π –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç. –ü—Ä–µ–∫–æ–ª?',
                       '–ú—É–¥—Ä–æ—Å—Ç—å –Ω–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º. –ë—ã–≤–∞–µ—Ç, —á—Ç–æ –≤–æ–∑—Ä–∞—Å—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ–¥–∏–Ω.',
                       '–í —Ç—é—Ä—å–º–µ —Å—Ç–æ–ª—å–∫–æ –Ω–µ —Å–∏–¥—è—Ç, —Å–∫–æ–ª—å–∫–æ –≤—ã –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ',
                       '–ï—Å–ª–∏ –í–∞—Å –æ–∫—Ä—É–∂–∞—é—Ç –æ–¥–Ω–∏ –¥—É—Ä–∞–∫–∏, –∑–Ω–∞—á–∏—Ç –í—ã —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π.',
                       '–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ö–æ—Ä–æ—à–æ? –°–¥–µ–ª–∞—Ç—å –ø–ª–æ—Ö–æ, –∞ –ø–æ—Ç–æ–º —Ç–∞–∫ –∂–µ, –∫–∞–∫ –±—ã–ª–æ.',
                       '–õ—É—á—à–µ –ø–µ—Ä–µ—Å–ø–∞—Ç—å, —á–µ–º –Ω–µ–¥–æ–µ—Å—Ç—å.',
                       '–ö–∞–∂–¥—ã–π —á–µ–ª–æ–≤–µ–∫ –ø–æ-—Å–≤–æ–µ–º—É –ø—Ä–∞–≤, –∞ –ø–æ-–º–æ–µ–º—É ‚Äî –Ω–µ—Ç',
                       '–ê –≤–æ—Ç –∏ Data-–±—Ä–æ–¥—è–≥–∞ science-—Å–∏–º–ø–∞—Ç—è–≥–∞',
                       '–ú–∏–ª–µ–π—à–∏–π —Ç—ã –º–æ–π',
                       '–Ø —â–∞—Å –∑–∞–∫–æ–Ω—á—É –≤–æ–æ–±—â–µ –≤—Å—ë!',
                       '–ù–µ –±–µ—Ä–∏ –≤ –≥–æ–ª–æ–≤—É',
                       '–ò–Ω–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å—Å—è –ø—Ä–∏–∫–∏–Ω—É—Ç—å—Å—è –¥—É—Ä–∞—á–∫–æ–º, —á—Ç–æ–±—ã –Ω–µ –≤—ã–≥–ª—è–¥–µ—Ç—å –∏–¥–∏–æ—Ç–æ–º']
        forfun = random.choice(all_phrases)
        await message.answer(text=forfun, parse_mode="MarkDown")


@dp.message_handler(commands=['info'])
async def bd_info(message: types.Message):
    user_id = message.from_user.id
    base_count = cur.execute('SELECT id FROM Users').fetchall()
    base_info = cur.execute('SELECT age FROM Users WHERE age > 0').fetchall()
    base_info_m = cur.execute('SELECT age FROM Users WHERE age > 0 AND sex == "man"').fetchall()
    base_info_w = cur.execute('SELECT age FROM Users WHERE age > 0 AND sex == "woman"').fetchall()
    base_list = [x[0] for x in base_info]
    base_list_m = [x[0] for x in base_info_m]
    base_list_w = [x[0] for x in base_info_w]
    user_age_avg = sum(base_list) / len(base_list)
    user_age_avg_m = sum(base_list_m) / len(base_list_m)
    user_age_avg_w = sum(base_list_w) / len(base_list_w)
    mess = (f'–° –≤–∞—à–µ–≥–æ –ø–æ–∑–≤–æ–ª–µ–Ω–∏—è, —è –ø–æ–¥–µ–ª—é—Å—å *–∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π* –ø–æ —á–∞—Ç—É:\n'
            f'–ù–∞ —Ç–µ–∫—É—â—É—é —Å–µ–∫—É–Ω–¥–æ—á–∫—É –≤ —á–∞—Ç–µ {len(base_list)} *–Ω–∞—Å—Ç–æ—è—â–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ DS*.\n'
            f'–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç *—ç–ª–∏—Ç—ã* —á–∞—Ç–∞ *{round(user_age_avg, 2)}\n'
            f'üóø - {round(user_age_avg_m, 2)}         üë©üèª‚Äçü¶∞ - {round(user_age_avg_w, 2)}*\n'
            f'–í–Ω–∏–º–∞–Ω–∏–µ! –Ø –≤–∏–∂—É –≤ —á–∞—Ç–µ –µ—â–µ {len(base_count)-len(base_list)} –∂–∏–≤—ã—Ö —é–∑–µ—Ä–æ–≤.*\n'
            f'–ù–∞–ø–∏—à–∏—Ç–µ /start –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —á–∞—Ç–µ —Å–æ –º–Ω–æ–π –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–∏ –ø—Ä–æ—Ñ–∏–ª–∏. –î–∞–≤–∞–π—Ç–µ –µ—â–µ –ª—É—á—à–µ —É–∑–Ω–∞–µ–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞. –í—Å–µ–º –¥–æ–±—Ä–∞')
    await message.answer(text=mess, parse_mode="MarkDown")
    sleep(3)
    if len(base_list_w) > len(base_list_m):
        dolya = round(len(base_list_w)/len(base_list),3)
        await message.answer(text=f'–ì–∏–Ω–µ–∫–æ–∫—Ä–∞—Ç–∏—è –Ω–∞–º–µ—Ç–∏–ª–∞—Å—å.\n–î–µ–≤—É—à–∫–∏ –≤–ª–∞–¥–µ—é—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º –ø–∞–∫–µ—Ç–æ–º —á–∞—Ç–∞\n–ò—Ö –¥–æ–ª—è *{str(dolya+"%")}', parse_mode="MarkDown")
    elif len(base_list_w) < len(base_list_m):
        dolya = round(len(base_list_m) / len(base_list), 3)
        await message.answer(text=f'–ú—É–∂—Å–∫–æ–µ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∏ –≤ –î–°–µ?\n–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç –ø–∞—Ä–µ–Ω—å–∫–æ–≤ *{str(dolya+"%")}*', parse_mode="MarkDown")
    elif len(base_list_w) == len(base_list_m):
        await message.answer(
            text=f'–Ø –ª—é–±–ª—é –∫–æ–≥–¥–∞ —Ç–∞–∫ –±—ã–≤–∞–µ—Ç. –û–±—ä—è–≤–ª—è—é –ø–æ–ª–æ–≤–æ–µ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –≤ —á–∞—Ç–µ', parse_mode="MarkDown")


@dp.message_handler(commands=['whyds'])
async def why_ds(message: types.Message):
    mess_id = message.id
    base_whyds = cur.execute('SELECT id, chat_name, whyds FROM Users WHERE whyds NOT NULL').fetchall()
    one_ds = random.choice(base_whyds)
    rand_emo = ['ü§å', '‚úäüèª', 'üí™üèª', 'ü´°']
    mention = "[" + one_ds[1] + "](tg://user?id=" + str(one_ds[0]) + ")"
    mess = (f'–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø—Ä–∏–π—Ç–∏ —Å—é–¥–∞, –º–Ω–æ–≥–∏–µ –∑–∞–¥–∞–≤–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å–æ–º:\n'
            f'–ß—Ç–æ —Ç–∞–∫–æ–µ —ç—Ç–æ—Ç *DataSciene?*{random.choice(rand_emo)}'
            f'–ö–æ–≥–¥–∞ –¥–µ–¥–ª–∞–π–Ω –±—ã–ª –±–ª–∏–∑–æ–∫ –∏ –≤—Ä–µ–º–µ–Ω–∏ —É–∂–µ –Ω–µ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å, —è –¥–∞–ª —Å–ª–∞–±–∏–Ω—É.\n'
            f'–ü–æ–¥—É–º–∞–ª, —á—Ç–æ —ç—Ç–æ –Ω–µ –º–æ—ë, —Ö–æ—Ç–µ–ª –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –¥–æ–º–∞—à–Ω–∏–π –¥–∏–≤–∞–Ω.\n'
            f'{mention} –ø–µ—Ä—É–±–µ–¥–∏–ª(–∞) –º–µ–Ω—è —Å–≤–æ–µ–π –º—É–¥—Ä–æ—Å—Ç—å—é.\n'
            f'–ú—É–¥—Ä–æ—Å—Ç—å *{one_ds[2]}* {random.choice(rand_emo)}')
    await message.answer(
        text=mess, parse_mode="MarkDown")
    await message.delete()

@dp.message_handler(commands=['myrep'])
async def my_rep(message: types.Message):
    user_id = message.from_user.id
    user_rate_cur = cur.execute('SELECT rep FROM Users WHERE id=' + str(user_id)).fetchone()
    user_name = message.from_user.first_name
    mention = "[" + user_name + "](tg://user?id=" + str(user_id) + ")"
    # –ú–æ–∂–Ω–æ –Ω–∞ –≤—ã–±–æ—Ä, —è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –≤—Ç–æ—Ä–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ, –Ω–æ —á–µ—Ä–µ–∑ == None –¥–µ–ª–∞—Ç—å –Ω–µ –Ω–∞–¥–æ
    # if user_rate_cur is None:
    if not user_rate_cur:
        await message.answer(
            text=f'EERRORR>>> USER NOT FOUND!!!! {mention}, —Ç–≤–æ–π –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç –º–Ω–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω\n–í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –¥–∞—Ç—å /start –Ω–∞—à–µ–º—É –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É?',
            parse_mode="MarkDown")
    else:
        await message.answer(
            text=f'–†–µ–ø—É—Ç–∞—Ü–∏—è {mention}, –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç - {user_rate_cur[0]} ‚≠êÔ∏è\n', parse_mode="MarkDown")


@dp.message_handler(commands=['toprep'])
async def top_rep(message: types.Message):
    top_of_rate = cur.execute('SELECT id, rep FROM Users ORDER BY rep DESC').fetchall()
    chat_member1 = await bot.get_chat_member(chat_id=message.chat.id, user_id=top_of_rate[0][0])
    first_name1 = chat_member1.user.first_name
    mention1 = "[" + first_name1 + "](tg://user?id=" + str(top_of_rate[0][0]) + ")"
    chat_member2 = await bot.get_chat_member(chat_id=message.chat.id, user_id=top_of_rate[1][0])
    first_name2 = chat_member2.user.first_name
    mention2 = "[" + first_name2 + "](tg://user?id=" + str(top_of_rate[1][0]) + ")"
    chat_member3 = await bot.get_chat_member(chat_id=message.chat.id, user_id=top_of_rate[2][0])
    first_name3 = chat_member3.user.first_name
    mention3 = "[" + first_name3 + "](tg://user?id=" + str(top_of_rate[2][0]) + ")"
    chat_member4 = await bot.get_chat_member(chat_id=message.chat.id, user_id=top_of_rate[3][0])
    first_name4 = chat_member4.user.first_name
    mention4 = "[" + first_name4 + "](tg://user?id=" + str(top_of_rate[3][0]) + ")"
    chat_member5 = await bot.get_chat_member(chat_id=message.chat.id, user_id=top_of_rate[4][0])
    first_name5 = chat_member5.user.first_name
    mention5 = "[" + first_name5 + "](tg://user?id=" + str(top_of_rate[4][0]) + ")"
    fin_mes = (
        f'–ò–∑–≤–æ–ª—å—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Å–∞–º—ã–º–∏ –ø—Ä–∏—è—Ç–Ω—ã–º–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º–∏:\n'
        f'–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä —É–≤–∞–∂–µ–Ω–∏—è - {mention1}.\n'
        f'–ë–∞–ª–ª—ã —É–≤–∞–∂–µ–Ω–∏—è {top_of_rate[0][1]}ü¶Ñü¶Ñü¶Ñ\n'
        f'–ó–∞–º. –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –ø–æ –ø—Ä–µ—Å—Ç–∏–∂—É - {mention2}.\n'
        f'–£—Ä–æ–≤–µ–Ω—å –ø—Ä–µ—Å—Ç–∏–∂–∞ {top_of_rate[1][1]}üëëüëë\n'
        f'–ó–∞–º. –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –ø–æ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç—É - {mention3}.\n'
        f'–û—á–∫–∏ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–∞ {top_of_rate[2][1]}üêóüêó\n'
        f'–ó–∞–º. –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –ø–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ - {mention4}.\n' 
        f'–†–µ–ø—É—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –∏—Ç–æ–≥ {top_of_rate[3][1]}üåàüåà\n'
        f'–¢–∞–º–∞–¥–∞ - –±–∞—è–Ω–∏—Å—Ç - {mention5}.\n'
        f'–£–¥–∞—á–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π {top_of_rate[4][1]}üï∫üíÉ\n'
    )
    await message.answer(text=fin_mes, parse_mode="MarkDown")
    await bot.send_sticker(chat_id=message.chat.id, sticker='CAACAgIAAxkBAAEGuQxjkKkuzFF33YjLCqoAASeVh1jwrdwAAhwDAAKiivEHzzHg8L3QHs4rBA')

# –ù–æ–≤–∏—á–æ–∫ –≤ –≥—Ä—É–ø–ø–µ
@dp.message_handler(content_types=types.ContentType.NEW_CHAT_MEMBERS)
async def new_member(message):
    await message.answer(f"–£ –Ω–∞—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ - {message.new_chat_members[0].get_mention(as_html=True)}. –í–∫—Ä–∞—Ç—Ü–µ —Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Å–≤–æ–π –ø—É—Ç—å DSe—Ä–∞, –Ω–∞–º —Ä–µ–∞–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", parse_mode='HTML')
    await bot.send_sticker(chat_id=message.chat.id, sticker='CAACAgIAAxkBAAEGl9tjhNncRF99x78OPh02Wk6byzBeEgACXgwAApS4UEtOn6EuKYdYXisE')

# –ó–∞–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ë–õ–ò–¶
@dp.callback_query_handler(text='blic')
async def my_blic(call):
    user_id = call.from_user.id
    mypvic = cur.execute('SELECT id FROM Blic').fetchall()
    mypvic_list = [x[0] for x in mypvic]
    button11 = InlineKeyboardButton(text='–ü—Ä–æ–π—Ç–∏ –ë–õ–ò–¶', callback_data='addvictory')
    if user_id in mypvic_list:
        mypvic = cur.execute('SELECT * FROM Blic WHERE id=' + str(user_id)).fetchone()
        myansw = (f'–ú–æ–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É:\n'
                  f'–ö–æ—à–∫–∏/—Å–æ–±–∞–∫–∏: {mypvic[1]}\n'
                  f'–ü–∏—Ü—Ü–∞/—Å—É—à–∏: {mypvic[2]}\n'
                  f'–ú–æ—Ä–µ/–≥–æ—Ä—ã: {mypvic[3]}\n'
                  f'–ö–≤–∞—Ä—Ç–∏—Ä–∞/–¥–æ–º: {mypvic[4]}\n'
                  f'–°–∞–º–æ–ª–µ—Ç/–ø–æ–µ–∑–¥:{mypvic[5]}\n'
                  f'–ß–∞–π/–∫–æ—Ñ–µ: {mypvic[6]}\n'
                  f'–¢–í/Youtube: {mypvic[7]}\n'
                  f'–ê–Ω–¥—Ä–æ–∏–¥/ios: {mypvic[8]}\n'
                  f'–¢–∞—Ç—É–∏—Ä–æ–≤–∫–∏: {mypvic[9]}\n'
                  f'–í–æ–¥–∏—Ç–µ–ª—å—Å—Ç–≤–æ: {mypvic[10]}\n'
                  f'–†–æ–¥–∏—Ç–µ–ª—å—Å—Ç–≤–æ: {mypvic[11]}\n'
                  f'–ú–æ—è –º—É–∑—ã–∫–∞: {mypvic[12]}\n'
                  f'–ú–æ–∏ —Ñ–∏–ª—å–º—ã: {mypvic[13]}\n'
                  f'–ú–æ–∏ –∫–Ω–∏–≥–∏: {mypvic[14]}\n')
        victorina_menu = InlineKeyboardMarkup(row_width=2)
        victorina_menu.insert(button11)
        victorina_menu.insert(button4)
        await bot.send_message(chat_id=call.from_user.id, text=myansw, parse_mode="MarkDown", reply_markup=victorina_menu)
    elif user_id not in mypvic_list:
        user_id = call.from_user.id
        victorina_menu1 = InlineKeyboardMarkup(row_width=2)
        victorina_menu1.insert(button11)
        victorina_menu1.insert(button4)
        await bot.send_message(chat_id=call.from_user.id, text='–¢—ã –µ—â–µ –Ω–µ –ø—Ä–æ—à—ë–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É. –°–µ–π—á–∞—Å –≥–æ—Ç–æ–≤?', parse_mode="MarkDown", reply_markup=victorina_menu1)
        cur.execute('INSERT INTO Blic(id, knigas) VALUES(?, ?)', (user_id, 0))
        bd.commit()


@dp.callback_query_handler(text='addvictory')
async def addvictory(call):
    user_id = call.from_user.id
    user_name = call.from_user.first_name
    vic_q1 = InlineKeyboardMarkup(row_width=2)
    button1 = InlineKeyboardButton(text='üêà', callback_data='cat')
    button2 = InlineKeyboardButton(text='üêï‚Äçü¶∫', callback_data='dog')
    vic_q1.insert(button1)
    vic_q1.insert(button2)
    await bot.send_message(
        chat_id=user_id,
        text='–ö–æ—à–∫–∏ –∏–ª–∏ –°–æ–±–∞–∫–∏?', parse_mode="MarkDown",  reply_markup=vic_q1)
    await Blic.cat_dog.set()

@dp.callback_query_handler(text=['cat', 'dog'], state=Blic.cat_dog)
async def cat_dog(call, state: FSMContext):
    user_id = call.from_user.id
    age_quest = f'–ü–∏—Ü—Ü–∞ –∏–ª–∏ —Å—É—à–∏?'
    vic_q2 = InlineKeyboardMarkup(row_width=2)
    button1 = InlineKeyboardButton(text='üçï', callback_data='pizza')
    button2 = InlineKeyboardButton(text='üç£', callback_data='suchi')
    vic_q2.insert(button1)
    vic_q2.insert(button2)
    if call.data == 'cat':
        cur.execute('UPDATE Blic SET cat_dog == ? WHERE id == ?', ('üêà', user_id))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text=age_quest, reply_markup=vic_q2)
        await Blic.pizza_suchi.set()
    elif call.data == 'dog':
        cur.execute('UPDATE Blic SET cat_dog == ? WHERE id == ?', ('üêï‚Äçü¶∫', user_id))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text=age_quest, reply_markup=vic_q2)
        await Blic.pizza_suchi.set()
@dp.callback_query_handler(text=['pizza', 'suchi'], state=Blic.pizza_suchi)
async def pizza_suchi(call, state: FSMContext):
    user_id = call.from_user.id
    age_quest = f'–ú–æ—Ä–µ –∏–ª–∏ –≥–æ—Ä—ã?'
    vic_q3 = InlineKeyboardMarkup(row_width=2)
    button1 = InlineKeyboardButton(text='üèñ', callback_data='sea')
    button2 = InlineKeyboardButton(text='üèî', callback_data='mount')
    vic_q3.insert(button1)
    vic_q3.insert(button2)
    if call.data == 'pizza':
        cur.execute('UPDATE Blic SET pizza_suchi == ? WHERE id == ?', ('üçï', user_id))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text=age_quest, reply_markup=vic_q3)
        await Blic.sea_mount.set()
    elif call.data == 'suchi':
        cur.execute('UPDATE Blic SET pizza_suchi == ? WHERE id == ?', ('üç£', user_id))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text=age_quest, reply_markup=vic_q3)
        await Blic.sea_mount.set()

@dp.callback_query_handler(text=['sea', 'mount'], state=Blic.sea_mount)
async def sea_mount(call, state: FSMContext):
    user_id = call.from_user.id
    age_quest = f'–ö–≤–∞—Ä—Ç–∏—Ä–∞ –∏–ª–∏ –¥–æ–º?'
    vic_q4 = InlineKeyboardMarkup(row_width=2)
    button1 = InlineKeyboardButton(text='üè¢', callback_data='flat')
    button2 = InlineKeyboardButton(text='üè°', callback_data='house')
    vic_q4.insert(button1)
    vic_q4.insert(button2)
    if call.data == 'sea':
        cur.execute('UPDATE Blic SET sea_mount == ? WHERE id == ?', ('üèñ', user_id))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text=age_quest, reply_markup=vic_q4)
        await Blic.flat_house.set()
    elif call.data == 'mount':
        cur.execute('UPDATE Blic SET sea_mount == ? WHERE id == ?', ('üèî', user_id))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text=age_quest, reply_markup=vic_q4)
        await Blic.flat_house.set()

@dp.callback_query_handler(text=['flat', 'house'], state=Blic.flat_house)
async def flat_house(call, state: FSMContext):
    user_id = call.from_user.id
    age_quest = f'–°–∞–º–æ–ª–µ—Ç –∏–ª–∏ –ø–æ–µ–∑–¥?'
    vic_q5 = InlineKeyboardMarkup(row_width=2)
    button1 = InlineKeyboardButton(text='üöÇ', callback_data='train')
    button2 = InlineKeyboardButton(text='‚úà', callback_data='plain')
    vic_q5.insert(button1)
    vic_q5.insert(button2)
    if call.data == 'flat':
        cur.execute('UPDATE Blic SET flat_house == ? WHERE id == ?', ('üè¢', user_id))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text=age_quest, reply_markup=vic_q5)
        await Blic.train_plain.set()
    elif call.data == 'house':
        cur.execute('UPDATE Blic SET flat_house == ? WHERE id == ?', ('üè°', user_id))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text=age_quest, reply_markup=vic_q5)
        await Blic.train_plain.set()
@dp.callback_query_handler(text=['train', 'plain'], state=Blic.train_plain)
async def train_plain(call, state: FSMContext):
    user_id = call.from_user.id
    age_quest = f'–ß–∞–π –∏–ª–∏ –∫–æ—Ñ–µ?'
    vic_q6 = InlineKeyboardMarkup(row_width=2)
    button1 = InlineKeyboardButton(text='ü´ñ', callback_data='tea')
    button2 = InlineKeyboardButton(text='‚òïÔ∏è', callback_data='coffe')
    vic_q6.insert(button1)
    vic_q6.insert(button2)
    if call.data == 'train':
        cur.execute('UPDATE Blic SET train_plain == ? WHERE id == ?', ('üöÇ', user_id))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text=age_quest, reply_markup=vic_q6)
        await Blic.tea_coffe.set()
    elif call.data == 'plain':
        cur.execute('UPDATE Blic SET train_plain == ? WHERE id == ?', ('‚úàÔ∏è', user_id))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text=age_quest, reply_markup=vic_q6)
        await Blic.tea_coffe.set()

@dp.callback_query_handler(text=['tea', 'coffe'], state=Blic.tea_coffe)
async def tea_coffe(call, state: FSMContext):
    user_id = call.from_user.id
    age_quest = f'–¢–µ–ª–µ–≤–∏–∑–æ—Ä –∏–ª–∏ Youtube?'
    vic_q7 = InlineKeyboardMarkup(row_width=2)
    button1 = InlineKeyboardButton(text='üì∫', callback_data='tv')
    button2 = InlineKeyboardButton(text='üñ•', callback_data='tube')
    vic_q7.insert(button1)
    vic_q7.insert(button2)
    if call.data == 'tea':
        cur.execute('UPDATE Blic SET tea_coffe == ? WHERE id == ?', ('ü´ñ', user_id))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text=age_quest, reply_markup=vic_q7)
        await Blic.tv_tube.set()
    elif call.data == 'coffe':
        cur.execute('UPDATE Blic SET tea_coffe == ? WHERE id == ?', ('‚òïÔ∏èÔ∏è', user_id))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text=age_quest, reply_markup=vic_q7)
        await Blic.tv_tube.set()
@dp.callback_query_handler(text=['tv', 'tube'], state=Blic.tv_tube)
async def tv_tube(call, state: FSMContext):
    user_id = call.from_user.id
    age_quest = f'Android –∏–ª–∏ iPhone?'
    vic_q8 = InlineKeyboardMarkup(row_width=2)
    button1 = InlineKeyboardButton(text='üì±ios', callback_data='and')
    button2 = InlineKeyboardButton(text='üìµandroid', callback_data='ios')
    vic_q8.insert(button1)
    vic_q8.insert(button2)
    if call.data == 'tv':
        cur.execute('UPDATE Blic SET tv_tube == ? WHERE id == ?', ('üì∫', user_id))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text=age_quest, reply_markup=vic_q8)
        await Blic.andr_ios.set()
    elif call.data == 'tube':
        cur.execute('UPDATE Blic SET tv_tube == ? WHERE id == ?', ('üñ•Ô∏è', user_id))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text=age_quest, reply_markup=vic_q8)
        await Blic.andr_ios.set()
@dp.callback_query_handler(text=['and', 'ios'], state=Blic.andr_ios)
async def tatoo(call, state: FSMContext):
    user_id = call.from_user.id
    age_quest = f'–ï—Å—Ç—å —Ç–∞—Ç—É–∏—Ä–æ–≤–∫–∏?'
    vic_q9 = InlineKeyboardMarkup(row_width=2)
    button1 = InlineKeyboardButton(text='‚úÖ', callback_data='yes_tatoo')
    button2 = InlineKeyboardButton(text='‚õîÔ∏è', callback_data='no_tatoo')
    vic_q9.insert(button1)
    vic_q9.insert(button2)
    if call.data == 'and':
        cur.execute('UPDATE Blic SET andr_ios == ? WHERE id == ?', ('üì±ios', user_id))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text=age_quest, reply_markup=vic_q9)
        await Blic.tatoo.set()
    elif call.data == 'ios':
        cur.execute('UPDATE Blic SET andr_ios == ? WHERE id == ?', ('üìµandroid', user_id))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text=age_quest, reply_markup=vic_q9)
        await Blic.tatoo.set()
@dp.callback_query_handler(text=['yes_tatoo', 'no_tatoo'], state=Blic.tatoo)
async def drive(call, state: FSMContext):
    user_id = call.from_user.id
    age_quest = f'–í–æ–¥–∏—à—å –º–∞—à–∏–Ω—É?'
    vic_q10 = InlineKeyboardMarkup(row_width=2)
    button1 = InlineKeyboardButton(text='‚úÖ', callback_data='yes_drive')
    button2 = InlineKeyboardButton(text='‚õîÔ∏è', callback_data='no_drive')
    vic_q10.insert(button1)
    vic_q10.insert(button2)
    if call.data == 'yes_tatoo':
        cur.execute('UPDATE Blic SET tatoo == ? WHERE id == ?', ('‚úÖ', user_id))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text=age_quest, reply_markup=vic_q10)
        await Blic.drive.set()
    elif call.data == 'no_tatoo':
        cur.execute('UPDATE Blic SET tatoo == ? WHERE id == ?', ('‚õîÔ∏è', user_id))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text=age_quest, reply_markup=vic_q10)
        await Blic.drive.set()
@dp.callback_query_handler(text=['yes_drive', 'no_drive'], state=Blic.drive)
async def parent_kid(call, state: FSMContext):
    user_id = call.from_user.id
    age_quest = f'–ï—Å—Ç—å –¥–µ—Ç–∏?'
    vic_q11 = InlineKeyboardMarkup(row_width=2)
    button1 = InlineKeyboardButton(text='‚úÖ', callback_data='yes_kid')
    button2 = InlineKeyboardButton(text='‚õîÔ∏è', callback_data='no_kid')
    vic_q11.insert(button1)
    vic_q11.insert(button2)
    if call.data == 'yes_drive':
        cur.execute('UPDATE Blic SET drive == ? WHERE id == ?', ('‚úÖ', user_id))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text=age_quest, reply_markup=vic_q11)
        await Blic.parent_kid.set()
    elif call.data == 'no_drive':
        cur.execute('UPDATE Blic SET drive == ? WHERE id == ?', ('‚õîÔ∏è', user_id))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text=age_quest, reply_markup=vic_q11)
        await Blic.parent_kid.set()
@dp.callback_query_handler(text=['yes_kid', 'no_kid'], state=Blic.parent_kid)
async def films(call, state: FSMContext):
    user_id = call.from_user.id
    age_quest = f'–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π 3 —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞ —Å–æ–∫—É—Ä—Å–Ω–∏–∫–∞–º'
    if call.data == 'yes_kid':
        cur.execute('UPDATE Blic SET parent_kid == ? WHERE id == ?', ('‚úÖ', user_id))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text=age_quest)
        await Blic.films.set()
    elif call.data == 'no_kid':
        cur.execute('UPDATE Blic SET parent_kid == ? WHERE id == ?', ('‚õîÔ∏è', user_id))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text=age_quest)
        await Blic.films.set()
@dp.message_handler(state=Blic.films)
async def films(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    mes = message.text
    cur.execute('UPDATE Blic SET films == ? WHERE id == ?', (mes, user_id))
    bd.commit()
    await bot.send_message(chat_id=user_id,
                               text='–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π 3 –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–∞/–≥—Ä—É–ø–ø—ã —Å–æ–∫—É—Ä—Å–Ω–∏–∫–∞–º')
    await Blic.music.set()
@dp.message_handler(state=Blic.music)
async def music(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    mes2 = message.text
    cur.execute('UPDATE Blic SET melody == ? WHERE id == ?', (mes2, user_id))
    bd.commit()
    await bot.send_message(chat_id=user_id,
                               text='–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π 3 –∫–Ω–∏–≥–∏ —Å–æ–∫—É—Ä—Å–Ω–∏–∫–∞–º')
    await Blic.books.set()


@dp.message_handler(state=Blic.books)
async def books(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    mes = message.text
    cur.execute('UPDATE Blic SET knigas == ? WHERE id == ?', (mes, user_id))
    bd.commit()
    mypvic = cur.execute('SELECT * FROM Blic WHERE id=' + str(user_id)).fetchone()
    myansw = (f'–ú–æ–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É:\n'
              f'–ö–æ—à–∫–∏/—Å–æ–±–∞–∫–∏: {mypvic[1]}\n'
              f'–ü–∏—Ü—Ü–∞/—Å—É—à–∏: {mypvic[2]}\n'
              f'–ú–æ—Ä–µ/–≥–æ—Ä—ã: {mypvic[3]}\n'
              f'–ö–≤–∞—Ä—Ç–∏—Ä–∞/–¥–æ–º: {mypvic[4]}\n'
              f'–°–∞–º–æ–ª–µ—Ç/–ø–æ–µ–∑–¥:{mypvic[5]}\n'
              f'–ß–∞–π/–∫–æ—Ñ–µ: {mypvic[6]}\n'
              f'–¢–í/Youtube: {mypvic[7]}\n'
              f'–ê–Ω–¥—Ä–æ–∏–¥/ios: {mypvic[8]}\n'
              f'–¢–∞—Ç—É–∏—Ä–æ–≤–∫–∏: {mypvic[9]}\n'
              f'–í–æ–¥–∏—Ç–µ–ª—å—Å—Ç–≤–æ: {mypvic[10]}\n'
              f'–†–æ–¥–∏—Ç–µ–ª—å—Å—Ç–≤–æ: {mypvic[11]}\n'
              f'–ú–æ—è –º—É–∑—ã–∫–∞: {mypvic[12]}\n'
              f'–ú–æ–∏ —Ñ–∏–ª—å–º—ã: {mypvic[13]}\n'
              f'–ú–æ–∏ –∫–Ω–∏–≥–∏: {mypvic[14]}\n')
    victorina_menu = InlineKeyboardMarkup(row_width=2)
    victorina_menu.insert(button4)
    await bot.send_message(chat_id=user_id,
                           text=myansw, reply_markup=victorina_menu)

    await state.reset_state()
# –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é(–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
@dp.callback_query_handler(text='menu')
async def menu(call):
    main_menu = InlineKeyboardMarkup(row_width=2)
    main_menu.insert(button1)
    main_menu.insert(button2)
    await bot.send_message(
        chat_id=call.from_user.id,
        text='–û–°–ù–û–í–ù–û–ï –ú–ï–ù–Æ',
        parse_mode="MarkDown",
        reply_markup=main_menu
    )

@dp.message_handler()
async def check_user(message: types.Message):
    # chat_name = message.from_user.first_name
    user_id = message.from_user.id
    fellows = cur.execute('SELECT id FROM Users').fetchall()
    fellows_list = [x[0] for x in fellows]
    if user_id not in fellows_list:
        cur.execute('INSERT INTO Users(id, rep) VALUES(?, ?)', (user_id, 0))
        bd.commit()


# –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å, —á—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª –Ω–µ —É—Ö–æ–¥–∏–ª –≤ –∏–≥–Ω–æ—Ä –æ—Ç –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤.
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
